# single.yml
# このファイルは、単一の item に対する処理を全てタスクとして記述
# inventory_hostnameとitem.hostの一致チェックや
# 差異チェック後のタスクスキップなどはすべてwhenで制御


#############################
# ホスト名がインベントリと一致するかチェック
#############################
- name: Check if host does match inventory_hostname
  when: inventory_hostname == item.host
  block:
  #############################
  # 配布元ファイル情報取得(ローカル)
  #############################
  - name: Check if source file exists (on control machine)
    stat:
      path: "{{ item.src }}"
    register: src_file_stat
    delegate_to: localhost

  - name: Fail if source file does not exist
    fail:
      msg: "{{ item.src }} が存在しません"
    when: src_file_stat.stat.exists == false

  - name: Success if source file does exist
    when: src_file_stat.stat.exists == true
    block:
    #############################
    # 配布先ファイル情報取得(リモート)
    #############################
    - name: Check if destination file exists (on remote host)
      stat:
        path: "{{ item.dest }}"
      register: dest_file_stat


    #############################
    # 配布先ファイルが無い場合(新規配布)
    #############################
    - name: Task block for new file distribution
      when: dest_file_stat.stat.exists == false
      block:
      - name: Add to new_distribution_items if destination does not exist
        set_fact:
          new_distribution_items: "{{ new_distribution_items | default([]) + [item] }}"
        when: dest_file_stat.stat.exists == false



    #############################
    # 配布先ファイルがある場合(上書き配布)
    #############################
    - name: Task block for overwriting existing file
      when:
        - dest_file_stat.stat.exists == true
        #############################
        # ファイル差異チェック
        #############################
        - >
          (item.mode                    != dest_file_stat.stat.mode)      or
          (item.owner | default('root') != dest_file_stat.stat.pw_name)   or
          (item.group | default('root') != dest_file_stat.stat.gr_name)   or
          (src_file_stat.stat.checksum  != dest_file_stat.stat.checksum)

      # 下記タスクは全てファイル差異がある場合のみ必要。
      # 差異がなければ何もせずこのitem処理終了。

      block:
        #############################
        # バックアップファイルパスの設定
        #############################
        - name: Set backup file path
          set_fact:
            backup_file_path: "{{ backup_dir }}/{{ inventory_hostname }}_{{ item.dest | basename }}.bak_{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"


        - name: Add to overwrite_items if destination exists and files are different
          set_fact:
            overwrite_items: "{{ overwrite_items | default([]) + [item] }}"

        #############################
        # 🔍 デバッグコード
        #############################
        - name: 🔍Debug before file deference check
          debug:
            var: dest_file_stat
          # when:
          #   - dest_file_stat.stat.exists == true

        #############################
        # バックアップ取得 ※NAS保存
        #############################
        - name: Ensure backup directory exists on remote NAS
          file:
            path: "{{ backup_dir }}"
            state: directory
            mode: '0755'


        - name: Backup existing remote file to NAS before overwriting
          command: cp "{{ item.dest }}" "{{ backup_file_path }}"

        - name: Verify backup file exists
          stat:
            path: "{{ backup_file_path }}"
          register: backup_file_stat_check


        - name: Fail if backup file not found
          fail:
            msg: "Backup file {{ backup_file_path }} not found after cp command. Overwrite aborted."
          when:
            - backup_file_stat_check.stat.exists == false


        #############################
        # 上書き可否最終確認
        #############################
        - name: Ask for confirmation before overwriting existing file
          pause:
            prompt: "Host={{inventory_hostname}} ファイル{{item.dest}}を上書きしますか？(yes/no)"
          register: overwrite_confirm
          with_items: "{{ overwrite_items }}"
          when: backup_file_stat_check.stat.exists == true


        #############################
        # ユーザ確認後ファイルコピー(上書き)
        #############################
        - name: Overwrite file on remote server
          copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            owner: "{{ item.owner | default('root') }}"
            group: "{{ item.group | default('root') }}"
            mode: "{{ item.mode }}"
          when:
            - backup_file_stat_check.stat.exists == true
            - overwrite_confirm.user_input == 'yes'

        #############################
        # バックアップ場所通知
        #############################
        - name: Inform about the backup location
          debug:
            msg: "Backup of old file is saved in {{ backup_dir }}/ (Host={{inventory_hostname}}, File={{item.dest | basename}})"
          when:
            - backup_file_stat_check.stat.exists == true
            - overwrite_confirm.user_input == 'yes'
